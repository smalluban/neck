{"version":3,"file":"dist/neck.js","sources":["src/core.coffee","src/sample.coffee"],"names":[],"mappings":"AAAA,CAAE;CAEA;;EAIA,CAAS,GAAT,GAAU;CACR;;;AAC+B,CAA7B,EAAgC,CAAhC,IAA6B;CAA7B,EAAI,EAAJ;OADF;;CADO,UAGP;CAPF,EAIS;CAJT,CAUA,CACE,CADF;CACE,CAAW,EAAX;EACY,EAAZ;CADA,CAEiB,EAAjB,CAFA,UAEA;CAFA,CAIO,EAAP,KAAQ;CACN;;GAA+B,CAA9B,EAAD,EAAgB,CAAN,OAAqB;CAC7B;;;CACE;;;CAEE,IAAC,EAAD;CAFF;CAIA;;;CAEE,IAAC,CAAD;CAFF,UALF;SAD8C;CAAjB,MAAiB;CAAhD,CAYA,MAAQ;CAAa,CAAW,EAAX;EAA0B,EAA1B,GAAiB;CAZtC,OAYA;CACA,YAAO;CAlBT,IAIO;CAJP,CAoBS,EAAT,KAAU;CACR,GAAG,CAAiB,CAApB,EAAG,IAAH;CACU,CAAR,KAAO,QAAP;OAFK;CApBT,IAoBS;CApBT,CAwBQ,EAAR,KAAS;CACC,CAAR,KAAO,MAAP,EAAa;CAzBf,IAwBQ;CAnCV;EAsCA,CAAiC,KAAzB,CAA0B,YAAlC;CAGE,CACE,EADF;CACE,CAAU,IAAV;EACQ,IAAR;CAFF;CAKA;GAAa,CAAT,CAAJ;KALA;CAOK,GAAD,GAAJ,GAAe,CAAf;CAhDF,EAsCiC;CAa5B,CAAqC,EAAtC,KAAJ;CAEE;EAAwB,CAAH,CAArB,KAAsB,CAAP;CAAe,EAAY,KAAb;CAA7B,IAAqB;CAGrB;;;;CACE,GAAI,CAAJ;CADF;oBALwC;CAA1C,EAA0C;CArD1C;A,CCAF,CAAC;CAEU,CACP,MADM,CAAR;CACE,CAAS,EAAT,KAAS;CAHZ,GAEC;CAFD;A","sourcesContent":["( ()->\n  # ECMAScript 5\n  \"use strict\"\n\n  # Helper functions\n\n  extend = (obj, extend)->\n    for property, value of extend\n      obj[property] = value unless obj.hasOwnProperty property\n    obj\n\n  # Core library\n  Neck =\n    observers: []\n    components: []\n    attributePrefix: false\n\n    setup: (el)->\n      @observers.push observer = new MutationObserver (mutations)=>\n        for mutation in mutations\n          for node in mutation.addedNodes\n            # compile element components\n            @compile node\n\n          for node in mutation.removedNodes\n            # remove element components\n            @remove node\n\n        return\n\n      observer.observe el, childList: true, subtree: true\n      return el\n\n    compile: (el)->\n      if node.nodeType is Node.ELEMENT_NODE\n        console.dir el\n\n    remove: (el)->\n      console.log \"Removing el: #{el}\"\n\n  document.registerNeckComponent = (target, opts)->\n    # Query target\n\n    extend opts,\n      priority: 0\n      target: target\n\n    # Set flags\n    opts.flags = opts.flags.split(' ') if opts.flags\n\n    Neck.components.push options\n\n  # Initialize Neck\n  root.addEventListener \"DOMContentLoaded\", ->\n    # Set order of registered components\n    Neck.components.sort (a,b)-> b.priority - a.priority\n\n    # Search for starting points - neck attribute\n    for el in document.querySelectorAll '[neck]'\n      Neck.setup el\n\n)()\n","(->\n\n  document.registerNeckComponent 'template[something]',\n    compile: ->\n    \n)()\n"]}